{"ast":null,"code":"import { fetchData } from \"../../utils/axiosConfig\";\nimport { FilterActions, FETCH_DATA_REQUEST, FETCH_DATA_SUCCESS, FETCH_DATA_FAILURE } from \"../../utils/constants\";\n\n// Define the action types\n// Define the action interfaces\nexport const fetchDataAction = () => {\n  return async (dispatch, getState) => {\n    const {\n      filters\n    } = getState();\n    try {\n      dispatch({\n        type: FETCH_DATA_REQUEST\n      });\n      const response = await fetchData(filters);\n      dispatch({\n        type: FETCH_DATA_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: FETCH_DATA_FAILURE,\n        error: \"Error occurred while fetching data\"\n      });\n    }\n  };\n};\nexport const setSectionFilter = section => {\n  return {\n    type: FilterActions.SET_SECTION_FILTER,\n    payload: section\n  };\n};\nexport const setSortFilter = sort => {\n  return {\n    type: FilterActions.SET_SORT_FILTER,\n    payload: sort\n  };\n};\nexport const setWindowFilter = window => {\n  return {\n    type: FilterActions.SET_WINDOW_FILTER,\n    payload: window\n  };\n};\nexport const setPage = page => {\n  return {\n    type: FilterActions.SET_PAGE,\n    payload: page\n  };\n};\nexport const setShowViral = showViral => {\n  return {\n    type: FilterActions.SET_SHOW_VIRAL,\n    payload: showViral\n  };\n};\nexport { FETCH_DATA_FAILURE, FETCH_DATA_REQUEST, FETCH_DATA_SUCCESS };","map":{"version":3,"names":["fetchData","FilterActions","FETCH_DATA_REQUEST","FETCH_DATA_SUCCESS","FETCH_DATA_FAILURE","fetchDataAction","dispatch","getState","filters","type","response","payload","data","error","console","log","setSectionFilter","section","SET_SECTION_FILTER","setSortFilter","sort","SET_SORT_FILTER","setWindowFilter","window","SET_WINDOW_FILTER","setPage","page","SET_PAGE","setShowViral","showViral","SET_SHOW_VIRAL"],"sources":["/Users/egresameto/imgur-client/src/redux/action/actions.ts"],"sourcesContent":["import axios from \"axios\";\nimport { Dispatch } from \"redux\";\n\nimport { fetchData } from \"../../utils/axiosConfig\";\nimport {\n  FilterActions,\n  FETCH_DATA_REQUEST,\n  FETCH_DATA_SUCCESS,\n  FETCH_DATA_FAILURE,\n} from \"../../utils/constants\";\nimport { RootState } from \"../store\";\n\n// Define the action types\n\n// Define the action interfaces\ninterface FetchDataRequestAction {\n  type: typeof FETCH_DATA_REQUEST;\n}\n\ninterface FetchDataSuccessAction {\n  type: typeof FETCH_DATA_SUCCESS;\n  payload: any;\n}\n\ninterface FetchDataFailureAction {\n  type: typeof FETCH_DATA_FAILURE;\n  error: string;\n}\n\nexport type FetchDataAction =\n  | FetchDataRequestAction\n  | FetchDataSuccessAction\n  | FetchDataFailureAction;\n\nexport const fetchDataAction = () => {\n  return async (\n    dispatch: Dispatch<FetchDataAction>,\n    getState: () => RootState\n  ) => {\n    const { filters } = getState();\n\n    try {\n      dispatch({ type: FETCH_DATA_REQUEST });\n\n      const response = await fetchData(filters);\n      dispatch({\n        type: FETCH_DATA_SUCCESS,\n        payload: response.data,\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: FETCH_DATA_FAILURE,\n        error: \"Error occurred while fetching data\",\n      });\n    }\n  };\n};\n\nexport const setSectionFilter = (section: string) => {\n  return {\n    type: FilterActions.SET_SECTION_FILTER,\n    payload: section,\n  };\n};\n\nexport const setSortFilter = (sort: string) => {\n  return {\n    type: FilterActions.SET_SORT_FILTER,\n    payload: sort,\n  };\n};\n\nexport const setWindowFilter = (window: string) => {\n  return {\n    type: FilterActions.SET_WINDOW_FILTER,\n    payload: window,\n  };\n};\n\nexport const setPage = (page: number) => {\n  return {\n    type: FilterActions.SET_PAGE,\n    payload: page,\n  };\n};\n\nexport const setShowViral = (showViral: boolean) => {\n  return {\n    type: FilterActions.SET_SHOW_VIRAL,\n    payload: showViral,\n  };\n};\n\nexport { FETCH_DATA_FAILURE, FETCH_DATA_REQUEST, FETCH_DATA_SUCCESS };\n"],"mappings":"AAGA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SACEC,aAAa,EACbC,kBAAkB,EAClBC,kBAAkB,EAClBC,kBAAkB,QACb,uBAAuB;;AAG9B;AAEA;AAoBA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAO,OACLC,QAAmC,EACnCC,QAAyB,KACtB;IACH,MAAM;MAAEC;IAAQ,CAAC,GAAGD,QAAQ,CAAC,CAAC;IAE9B,IAAI;MACFD,QAAQ,CAAC;QAAEG,IAAI,EAAEP;MAAmB,CAAC,CAAC;MAEtC,MAAMQ,QAAQ,GAAG,MAAMV,SAAS,CAACQ,OAAO,CAAC;MACzCF,QAAQ,CAAC;QACPG,IAAI,EAAEN,kBAAkB;QACxBQ,OAAO,EAAED,QAAQ,CAACE;MACpB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBP,QAAQ,CAAC;QACPG,IAAI,EAAEL,kBAAkB;QACxBS,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAIC,OAAe,IAAK;EACnD,OAAO;IACLR,IAAI,EAAER,aAAa,CAACiB,kBAAkB;IACtCP,OAAO,EAAEM;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAME,aAAa,GAAIC,IAAY,IAAK;EAC7C,OAAO;IACLX,IAAI,EAAER,aAAa,CAACoB,eAAe;IACnCV,OAAO,EAAES;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAME,eAAe,GAAIC,MAAc,IAAK;EACjD,OAAO;IACLd,IAAI,EAAER,aAAa,CAACuB,iBAAiB;IACrCb,OAAO,EAAEY;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAME,OAAO,GAAIC,IAAY,IAAK;EACvC,OAAO;IACLjB,IAAI,EAAER,aAAa,CAAC0B,QAAQ;IAC5BhB,OAAO,EAAEe;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAME,YAAY,GAAIC,SAAkB,IAAK;EAClD,OAAO;IACLpB,IAAI,EAAER,aAAa,CAAC6B,cAAc;IAClCnB,OAAO,EAAEkB;EACX,CAAC;AACH,CAAC;AAED,SAASzB,kBAAkB,EAAEF,kBAAkB,EAAEC,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}